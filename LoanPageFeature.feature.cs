// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Auden_QA_Test_Chivers
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verify_ShortTearmLoan_WebPage")]
    public partial class Verify_ShortTearmLoan_WebPageFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "LoanPageFeature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Verify_ShortTearmLoan_WebPage", "\tAuden loans Page Tests for Slider and Negative and Positive Repayment day Select" +
                    "ion", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("I open and navigate to the Auden Short Term Loan Web Site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that the Loans Slider remains within the Min / Max Boundaries")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("-")]
        [NUnit.Framework.CategoryAttribute("The")]
        [NUnit.Framework.CategoryAttribute("min")]
        [NUnit.Framework.CategoryAttribute("and")]
        [NUnit.Framework.CategoryAttribute("max")]
        [NUnit.Framework.CategoryAttribute("amounts")]
        [NUnit.Framework.CategoryAttribute("of")]
        [NUnit.Framework.CategoryAttribute("Loan")]
        [NUnit.Framework.CategoryAttribute("on")]
        [NUnit.Framework.CategoryAttribute("slider.")]
        public virtual void TestThatTheLoansSliderRemainsWithinTheMinMaxBoundaries()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "-",
                    "The",
                    "min",
                    "and",
                    "max",
                    "amounts",
                    "of",
                    "Loan",
                    "on",
                    "slider."};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that the Loans Slider remains within the Min / Max Boundaries", null, tagsOfScenario, argumentsOfScenario);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 9
 testRunner.Given("The slider element is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.When("Slider is set to Min Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.When("Slider is set to Max Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.Then("Close the Auden Short Term Loan Web Site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that the Amount displayed on Loans Slider matches the current set value")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("-")]
        [NUnit.Framework.CategoryAttribute("The")]
        [NUnit.Framework.CategoryAttribute("selected")]
        [NUnit.Framework.CategoryAttribute("slider")]
        [NUnit.Framework.CategoryAttribute("amount")]
        [NUnit.Framework.CategoryAttribute("is")]
        [NUnit.Framework.CategoryAttribute("Loan")]
        [NUnit.Framework.CategoryAttribute("amount.")]
        public virtual void TestThatTheAmountDisplayedOnLoansSliderMatchesTheCurrentSetValue()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "-",
                    "The",
                    "selected",
                    "slider",
                    "amount",
                    "is",
                    "Loan",
                    "amount."};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that the Amount displayed on Loans Slider matches the current set value", null, tagsOfScenario, argumentsOfScenario);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 16
 testRunner.Given("Slider is set to Min Position value will be £200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When("Slider is set to Quarter Position value will be £280", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.When("Slider is set to Half Position value will be £350", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.When("Slider is set to Three Quarters Position value will be £420", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.When("Slider is set to Max Position value will be £500", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then("Close down the Auden Short Term Loan Web Site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test that the weekend can’t be a repayment day, so it should show First Repayment" +
            " Day Option as Friday. For example, if user select repayment day as 6th Sept, wh" +
            "ich is Sunday, it will push you back and show first repayment day as Tuesday 6th" +
            " Oct 2020.")]
        [NUnit.Framework.CategoryAttribute("smoke")]
        [NUnit.Framework.CategoryAttribute("-")]
        [NUnit.Framework.CategoryAttribute("The")]
        [NUnit.Framework.CategoryAttribute("weekend")]
        [NUnit.Framework.CategoryAttribute("can’t")]
        [NUnit.Framework.CategoryAttribute("be")]
        [NUnit.Framework.CategoryAttribute("a")]
        [NUnit.Framework.CategoryAttribute("repayment")]
        [NUnit.Framework.CategoryAttribute("day,")]
        [NUnit.Framework.CategoryAttribute("so")]
        [NUnit.Framework.CategoryAttribute("it")]
        [NUnit.Framework.CategoryAttribute("should")]
        [NUnit.Framework.CategoryAttribute("show")]
        [NUnit.Framework.CategoryAttribute("First")]
        [NUnit.Framework.CategoryAttribute("Repayment")]
        [NUnit.Framework.CategoryAttribute("Day")]
        [NUnit.Framework.CategoryAttribute("Option")]
        [NUnit.Framework.CategoryAttribute("as")]
        [NUnit.Framework.CategoryAttribute("Friday.")]
        public virtual void TestThatTheWeekendCanTBeARepaymentDaySoItShouldShowFirstRepaymentDayOptionAsFriday_ForExampleIfUserSelectRepaymentDayAs6ThSeptWhichIsSundayItWillPushYouBackAndShowFirstRepaymentDayAsTuesday6ThOct2020_()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke",
                    "-",
                    "The",
                    "weekend",
                    "can’t",
                    "be",
                    "a",
                    "repayment",
                    "day,",
                    "so",
                    "it",
                    "should",
                    "show",
                    "First",
                    "Repayment",
                    "Day",
                    "Option",
                    "as",
                    "Friday."};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test that the weekend can’t be a repayment day, so it should show First Repayment" +
                    " Day Option as Friday. For example, if user select repayment day as 6th Sept, wh" +
                    "ich is Sunday, it will push you back and show first repayment day as Tuesday 6th" +
                    " Oct 2020.", null, tagsOfScenario, argumentsOfScenario);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 25
 testRunner.Given("I click the Repayment Day Button 1 the first Repayment Negative Test value will b" +
                        "e Wednesday 30 Oct 2020 or Thursday 1 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.When("I click the Repayment Day Button 1 the first Repayment Positive Test value will b" +
                        "e Thursday 1 Oct 2020 or Friday 30 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.When("I click the Repayment Day Button 5 the first Repayment Negative Testvalue will be" +
                        " Wednesday 30 Sep 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.When("I click the Repayment Day Button 5 the first Repayment Positive Test value will b" +
                        "e Monday 5 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.When("I click the Repayment Day Button 6 the first Repayment Negative Testvalue will be" +
                        " Wednesday 30 Sep 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
 testRunner.When("I click the Repayment Day Button 6 the first Repayment Positive Test value will b" +
                        "e Tuesday 6 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
 testRunner.When("I click the Repayment Day Button 18 the first Repayment Negative Testvalue will b" +
                        "e Wednesday 30 Sep 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.When("I click the Repayment Day Button 18 the first Repayment Positive Test value will " +
                        "be Friday 16 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.When("I click the Repayment Day Button 26 the first Repayment Negative Testvalue will b" +
                        "e Wednesday 30 Sep 2020 or Monday 01 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.When("I click the Repayment Day Button 26 the first Repayment Positive Test value will " +
                        "be Friday 25 Sep 2020 or Monday 26 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.When("I click the Repayment Day Button 27 the first Repayment Negative Test value will " +
                        "be Wednesday 30 Sep 2020 or Monday 01 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.When("I click the Repayment Day Button 27 the first Repayment Positive Test value will " +
                        "be Friday 25 Sep 2020 or Tuesday 27 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.When("I click the Repayment Day Button Last Working Day the first Repayment Negative Te" +
                        "st value will be Monday 01 Oct 2020 or Monday 01 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.When("I click the Repayment Day Button Last Working Day the first Repayment Positive Te" +
                        "st value will be Wednesday 30 Sep 2020 or Friday 30 Oct 2020", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("Close the Auden Short Term Loan Web Site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
